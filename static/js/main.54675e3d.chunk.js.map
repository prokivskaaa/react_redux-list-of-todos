{"version":3,"sources":["features/filter.ts","features/currentTodo.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","currentTodoReducer","state","action","type","payload","filterReducer","query","status","ALL","todosReducer","rootReducer","combineReducers","currentTodo","filter","todos","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","length","className","map","todo","isSelectedTodo","id","classNames","completed","title","onClick","setTodo","TodoFilter","onSubmit","event","preventDefault","value","onChange","setStatus","target","ACTIVE","COMPLETED","placeholder","setQuery","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","user","setUser","isUserLoaded","setIsUserLoaded","useEffect","userId","fetchedUser","href","email","name","App","visibleTodos","useMemo","isCorrectStatus","lowerCasedQuery","toLowerCase","trim","lowerCasedTodoTitle","includes","fetchedTodos","setTodos","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.54675e3d.chunk.js","sourcesContent":["export enum Status {\n  ALL = 'all',\n  COMPLETED = 'completed',\n  ACTIVE = 'active',\n}\n\ntype SetStatusAction = {\n  type: 'filter/SET_STATUS';\n  payload: Status;\n};\n\nexport const setStatus = (status: Status): SetStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\ntype SetQueryAction = {\n  type: 'filter/SET_QUERY';\n  payload: string;\n};\n\nexport const setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\ntype DeleteQueryAction = {\n  type: 'filter/DELETE_QUERY';\n};\n\nexport const deleteQuery = (): DeleteQueryAction => ({\n  type: 'filter/DELETE_QUERY',\n});\n\ntype State = {\n  query: string;\n  status: Status;\n};\n\ntype Action = SetStatusAction | SetQueryAction | DeleteQueryAction;\n\nconst filterReducer = (\n  state: State = {\n    query: '',\n    status: Status.ALL,\n  },\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'filter/SET_STATUS':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    case 'filter/SET_QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case 'filter/DELETE_QUERY':\n      return {\n        ...state,\n        query: '',\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nexport const removeTodo = (): RemoveTodoAction => ({\n  type: 'currentTodo/REMOVE',\n});\n\nexport const setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (state: State = null, action: Action): State => {\n  switch (action.type) {\n    case 'currentTodo/REMOVE':\n      return null;\n    case 'currentTodo/SET':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Todo } from '../types/Todo';\n\nexport const actions = {};\n\ntype SetTodosAction = {\n  type: 'todos/SET';\n  payload: Todo[];\n};\n\nexport const setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\ntype State = Todo[];\ntype Action = SetTodosAction;\n\nconst todosReducer = (state: State = [], action: Action): State => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { setTodo } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[];\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  const dispatch = useAppDispatch();\n\n  const currentTodo = useAppSelector((state) => state.currentTodo);\n\n  return (\n    <>\n      {todos.length ? (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {todos.map((todo) => {\n              const isSelectedTodo = currentTodo?.id === todo.id;\n\n              return (\n                <tr\n                  data-cy=\"todo\"\n                  className={classNames({\n                    'has-background-info-light': isSelectedTodo,\n                  })}\n                >\n                  <td className=\"is-vcentered\">{todo.id}</td>\n                  <td className=\"is-vcentered\">\n                    {todo.completed && (\n                      <span className=\"icon\" data-cy=\"iconCompleted\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    )}\n                  </td>\n                  <td className=\"is-vcentered is-expanded\">\n                    <p\n                      className={classNames({\n                        'has-text-success': todo.completed,\n                        'has-text-danger': !todo.completed,\n                      })}\n                    >\n                      {todo.title}\n                    </p>\n                  </td>\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => dispatch(setTodo(todo))}\n                    >\n                      <span className=\"icon\">\n                        <i\n                          className={classNames('far', {\n                            'fa-eye': !isSelectedTodo,\n                            'fa-eye-slash': isSelectedTodo,\n                          })}\n                        />\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      ) : (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n    </>\n  );\n};\n","import React, { ChangeEventHandler } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport {\n  deleteQuery,\n  setQuery,\n  setStatus,\n  Status,\n} from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { query, status } = useAppSelector((state) => state.filter);\n\n  const handleStatusChange: ChangeEventHandler<HTMLSelectElement> = (event) => {\n    dispatch(setStatus(event.target.value as Status));\n  };\n\n  const handleQueryChange: ChangeEventHandler<HTMLInputElement> = (event) => {\n    dispatch(setQuery(event.target.value as Status));\n  };\n\n  const handleQueryDelete = () => {\n    dispatch(deleteQuery());\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={(event) => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleStatusChange}\n          >\n            <option value={Status.ALL}>All</option>\n            <option value={Status.ACTIVE}>Active</option>\n            <option value={Status.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQueryChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleQueryDelete}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { removeTodo } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector((state) => state.currentTodo);\n\n  const [user, setUser] = useState<User | null>(null);\n\n  const [isUserLoaded, setIsUserLoaded] = useState(false);\n\n  useEffect(() => {\n    if (currentTodo) {\n      getUser(currentTodo.userId).then((fetchedUser: User) => {\n        setUser(fetchedUser);\n\n        setIsUserLoaded(true);\n      });\n    }\n  }, [currentTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!isUserLoaded ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(removeTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n              {' by '}\n              <a href={`mailto:${user?.email}`}>{user?.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { setTodos } from './features/todos';\nimport { Status } from './features/filter';\nimport { Todo } from './types/Todo';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  const currentTodo = useAppSelector((state) => state.currentTodo);\n  const todos = useAppSelector((state) => state.todos);\n  const { query, status } = useAppSelector((state) => state.filter);\n\n  const visibleTodos = useMemo(() => {\n    return todos.filter(({ title, completed }: Todo) => {\n      const lowerCasedQuery = query.toLowerCase().trim();\n      const lowerCasedTodoTitle = title.toLowerCase();\n\n      let isCorrectStatus;\n\n      switch (status) {\n        case Status.ACTIVE:\n          isCorrectStatus = !completed;\n          break;\n\n        case Status.COMPLETED:\n          isCorrectStatus = completed;\n          break;\n\n        default:\n          isCorrectStatus = true;\n      }\n\n      return lowerCasedTodoTitle.includes(lowerCasedQuery) && isCorrectStatus;\n    });\n  }, [todos, status, query]);\n\n  useEffect(() => {\n    getTodos().then((fetchedTodos) => {\n      dispatch(setTodos(fetchedTodos));\n    });\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {!todos.length ? (\n                <Loader />\n              ) : (\n                <TodoList todos={visibleTodos} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}